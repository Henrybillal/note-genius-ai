"use client"

import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import {
  Search,
  Plus,
  Menu,
  Settings,
  Brain,
  Lock,
  Calendar,
  Folder,
  Tag,
  Moon,
  Sun,
  Bell,
  CheckSquare,
  FileText,
  MoreVertical,
  Zap,
  Mail,
} from "lucide-react"
import { NoteEditor } from "@/components/note-editor"
import { AIAssistant } from "@/components/ai-assistant"
import { FolderManager } from "@/components/folder-manager"
import { SettingsPanel } from "@/components/settings-panel"
import { TaskManager } from "@/components/task-manager"
import { CalendarView } from "@/components/calendar-view"
import { cn } from "@/lib/utils"
import { AdvancedAIFeatures } from "@/components/advanced-ai-features"
import { ContactPage } from "@/components/contact-page"

interface Note {
  id: string
  title: string
  content: string
  tags: string[]
  folder: string
  createdAt: Date
  updatedAt: Date
  isLocked: boolean
  isPrivate: boolean
  reminder?: Date
  type: "note" | "checklist" | "task"
  aiGenerated?: boolean
}

export default function NoteGeniusApp() {
  const [currentView, setCurrentView] = useState<
    "notes" | "editor" | "ai" | "folders" | "settings" | "tasks" | "calendar" | "advanced-ai" | "contact"
  >("notes")
  const [notes, setNotes] = useState<Note[]>([])
  const [selectedNote, setSelectedNote] = useState<Note | null>(null)
  const [searchQuery, setSearchQuery] = useState("")
  const [selectedFolder, setSelectedFolder] = useState("All Notes")
  const [selectedTags, setSelectedTags] = useState<string[]>([])
  const [isDarkMode, setIsDarkMode] = useState(false)
  const [isMenuOpen, setIsMenuOpen] = useState(false)

  // Sample data
  useEffect(() => {
    const sampleNotes: Note[] = [
      {
        id: "1",
        title: "Meeting Notes - Q4 Planning",
        content:
          "# Q4 Planning Meeting\n\n## Key Points:\n- Revenue targets increased by 15%\n- New product launch in December\n- Team expansion needed\n\n## Action Items:\n- [ ] Hire 2 new developers\n- [ ] Finalize marketing budget\n- [x] Review competitor analysis",
        tags: ["work", "meeting", "planning"],
        folder: "Work",
        createdAt: new Date("2024-01-15"),
        updatedAt: new Date("2024-01-15"),
        isLocked: false,
        isPrivate: false,
        type: "note",
        aiGenerated: false,
      },
      {
        id: "2",
        title: "Daily Tasks",
        content:
          "- [ ] Review project proposals\n- [x] Call client about requirements\n- [ ] Update documentation\n- [ ] Prepare presentation slides",
        tags: ["tasks", "daily"],
        folder: "Personal",
        createdAt: new Date("2024-01-16"),
        updatedAt: new Date("2024-01-16"),
        isLocked: false,
        isPrivate: false,
        type: "checklist",
        reminder: new Date("2024-01-17T09:00:00"),
      },
      {
        id: "3",
        title: "AI-Generated Summary: Market Research",
        content:
          "# Market Research Summary\n\n*Generated by AI Assistant*\n\n## Key Findings:\n- Mobile app market growing 23% YoY\n- AI integration is top priority for 67% of users\n- Security concerns remain primary barrier\n\n## Recommendations:\n1. Focus on AI-powered features\n2. Implement robust security measures\n3. Target productivity-focused users",
        tags: ["research", "ai-generated", "market"],
        folder: "Research",
        createdAt: new Date("2024-01-14"),
        updatedAt: new Date("2024-01-14"),
        isLocked: true,
        isPrivate: false,
        type: "note",
        aiGenerated: true,
      },
    ]
    setNotes(sampleNotes)
  }, [])

  const filteredNotes = notes.filter((note) => {
    const matchesSearch =
      note.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
      note.content.toLowerCase().includes(searchQuery.toLowerCase())
    const matchesFolder = selectedFolder === "All Notes" || note.folder === selectedFolder
    const matchesTags = selectedTags.length === 0 || selectedTags.some((tag) => note.tags.includes(tag))
    return matchesSearch && matchesFolder && matchesTags
  })

  const folders = ["All Notes", ...Array.from(new Set(notes.map((note) => note.folder)))]
  const allTags = Array.from(new Set(notes.flatMap((note) => note.tags)))

  const createNewNote = () => {
    const newNote: Note = {
      id: Date.now().toString(),
      title: "New Note",
      content: "",
      tags: [],
      folder: selectedFolder === "All Notes" ? "Personal" : selectedFolder,
      createdAt: new Date(),
      updatedAt: new Date(),
      isLocked: false,
      isPrivate: false,
      type: "note",
    }
    setNotes([newNote, ...notes])
    setSelectedNote(newNote)
    setCurrentView("editor")
  }

  const updateNote = (updatedNote: Note) => {
    setNotes(notes.map((note) => (note.id === updatedNote.id ? updatedNote : note)))
    setSelectedNote(updatedNote)
  }

  const deleteNote = (noteId: string) => {
    setNotes(notes.filter((note) => note.id !== noteId))
    if (selectedNote?.id === noteId) {
      setSelectedNote(null)
      setCurrentView("notes")
    }
  }

  return (
    <div className={cn("min-h-screen transition-colors", isDarkMode ? "dark bg-gray-900" : "bg-gray-50")}>
      {/* Header */}
      <header className="sticky top-0 z-50 bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700 px-4 py-3">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-3">
            <Button variant="ghost" size="sm" onClick={() => setIsMenuOpen(!isMenuOpen)} className="md:hidden">
              <Menu className="h-5 w-5" />
            </Button>
            <div className="flex items-center gap-2">
              <div className="w-8 h-8 bg-gradient-to-br from-blue-500 to-purple-600 rounded-lg flex items-center justify-center">
                <Brain className="h-4 w-4 text-white" />
              </div>
              <h1 className="text-xl font-bold text-gray-900 dark:text-white">NoteGenius AI</h1>
            </div>
          </div>
          <div className="flex items-center gap-2">
            <Button variant="ghost" size="sm" onClick={() => setIsDarkMode(!isDarkMode)}>
              {isDarkMode ? <Sun className="h-4 w-4" /> : <Moon className="h-4 w-4" />}
            </Button>
            <Button variant="ghost" size="sm" onClick={() => setCurrentView("settings")}>
              <Settings className="h-4 w-4" />
            </Button>
          </div>
        </div>
      </header>

      <div className="flex h-[calc(100vh-73px)]">
        {/* Sidebar */}
        <aside
          className={cn(
            "w-64 bg-white dark:bg-gray-800 border-r border-gray-200 dark:border-gray-700 transition-transform duration-300",
            isMenuOpen || window.innerWidth >= 768 ? "translate-x-0" : "-translate-x-full",
            "fixed md:relative z-40 h-full",
          )}
        >
          <div className="p-4 space-y-4">
            {/* Search */}
            <div className="relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
              <Input
                placeholder="Search notes..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className="pl-10"
              />
            </div>

            {/* Navigation */}
            <nav className="space-y-2">
              <Button
                variant={currentView === "notes" ? "default" : "ghost"}
                className="w-full justify-start"
                onClick={() => setCurrentView("notes")}
              >
                <FileText className="h-4 w-4 mr-2" />
                All Notes
              </Button>
              <Button
                variant={currentView === "tasks" ? "default" : "ghost"}
                className="w-full justify-start"
                onClick={() => setCurrentView("tasks")}
              >
                <CheckSquare className="h-4 w-4 mr-2" />
                Tasks & Lists
              </Button>
              <Button
                variant={currentView === "calendar" ? "default" : "ghost"}
                className="w-full justify-start"
                onClick={() => setCurrentView("calendar")}
              >
                <Calendar className="h-4 w-4 mr-2" />
                Calendar
              </Button>
              <Button
                variant={currentView === "ai" ? "default" : "ghost"}
                className="w-full justify-start"
                onClick={() => setCurrentView("ai")}
              >
                <Brain className="h-4 w-4 mr-2" />
                AI Assistant
              </Button>
              <Button
                variant={currentView === "advanced-ai" ? "default" : "ghost"}
                className="w-full justify-start"
                onClick={() => setCurrentView("advanced-ai")}
              >
                <Zap className="h-4 w-4 mr-2" />
                Advanced AI
              </Button>
              <Button
                variant={currentView === "folders" ? "default" : "ghost"}
                className="w-full justify-start"
                onClick={() => setCurrentView("folders")}
              >
                <Folder className="h-4 w-4 mr-2" />
                Folders
              </Button>
              <Button
                variant={currentView === "contact" ? "default" : "ghost"}
                className="w-full justify-start"
                onClick={() => setCurrentView("contact")}
              >
                <Mail className="h-4 w-4 mr-2" />
                Contact
              </Button>
            </nav>

            {/* Folders */}
            <div className="space-y-2">
              <h3 className="text-sm font-medium text-gray-500 dark:text-gray-400">Folders</h3>
              {folders.map((folder) => (
                <Button
                  key={folder}
                  variant={selectedFolder === folder ? "secondary" : "ghost"}
                  size="sm"
                  className="w-full justify-start text-sm"
                  onClick={() => setSelectedFolder(folder)}
                >
                  <Folder className="h-3 w-3 mr-2" />
                  {folder}
                </Button>
              ))}
            </div>

            {/* Tags */}
            <div className="space-y-2">
              <h3 className="text-sm font-medium text-gray-500 dark:text-gray-400">Tags</h3>
              <div className="flex flex-wrap gap-1">
                {allTags.map((tag) => (
                  <Badge
                    key={tag}
                    variant={selectedTags.includes(tag) ? "default" : "secondary"}
                    className="text-xs cursor-pointer"
                    onClick={() => {
                      setSelectedTags((prev) => (prev.includes(tag) ? prev.filter((t) => t !== tag) : [...prev, tag]))
                    }}
                  >
                    <Tag className="h-2 w-2 mr-1" />
                    {tag}
                  </Badge>
                ))}
              </div>
            </div>
          </div>
        </aside>

        {/* Main Content */}
        <main className="flex-1 overflow-hidden">
          {currentView === "notes" && (
            <div className="h-full flex flex-col">
              {/* Notes Header */}
              <div className="p-4 border-b border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800">
                <div className="flex items-center justify-between">
                  <h2 className="text-lg font-semibold text-gray-900 dark:text-white">
                    {selectedFolder} ({filteredNotes.length})
                  </h2>
                  <Button onClick={createNewNote} size="sm">
                    <Plus className="h-4 w-4 mr-1" />
                    New Note
                  </Button>
                </div>
              </div>

              {/* Notes List */}
              <div className="flex-1 overflow-y-auto p-4 space-y-3">
                {filteredNotes.map((note) => (
                  <Card
                    key={note.id}
                    className="cursor-pointer hover:shadow-md transition-shadow"
                    onClick={() => {
                      setSelectedNote(note)
                      setCurrentView("editor")
                    }}
                  >
                    <CardHeader className="pb-2">
                      <div className="flex items-start justify-between">
                        <CardTitle className="text-base line-clamp-1 flex items-center gap-2">
                          {note.isLocked && <Lock className="h-3 w-3 text-gray-500" />}
                          {note.aiGenerated && <Brain className="h-3 w-3 text-blue-500" />}
                          {note.type === "checklist" && <CheckSquare className="h-3 w-3 text-green-500" />}
                          {note.title}
                        </CardTitle>
                        <Button variant="ghost" size="sm">
                          <MoreVertical className="h-3 w-3" />
                        </Button>
                      </div>
                      <div className="flex items-center gap-2 text-xs text-gray-500">
                        <span>{note.folder}</span>
                        <span>•</span>
                        <span>{note.updatedAt.toLocaleDateString()}</span>
                        {note.reminder && (
                          <>
                            <span>•</span>
                            <Bell className="h-3 w-3" />
                          </>
                        )}
                      </div>
                    </CardHeader>
                    <CardContent className="pt-0">
                      <p className="text-sm text-gray-600 dark:text-gray-300 line-clamp-2 mb-2">
                        {note.content.replace(/[#*\-[\]]/g, "").substring(0, 100)}...
                      </p>
                      <div className="flex flex-wrap gap-1">
                        {note.tags.map((tag) => (
                          <Badge key={tag} variant="outline" className="text-xs">
                            {tag}
                          </Badge>
                        ))}
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>
            </div>
          )}

          {currentView === "editor" && selectedNote && (
            <NoteEditor
              note={selectedNote}
              onUpdate={updateNote}
              onDelete={deleteNote}
              onBack={() => setCurrentView("notes")}
            />
          )}

          {currentView === "ai" && (
            <AIAssistant
              notes={notes}
              onCreateNote={(note) => {
                setNotes([note, ...notes])
                setSelectedNote(note)
                setCurrentView("editor")
              }}
            />
          )}

          {currentView === "folders" && <FolderManager notes={notes} onUpdateNote={updateNote} />}

          {currentView === "settings" && (
            <SettingsPanel isDarkMode={isDarkMode} onToggleDarkMode={() => setIsDarkMode(!isDarkMode)} />
          )}

          {currentView === "tasks" && (
            <TaskManager
              notes={notes.filter((note) => note.type === "checklist" || note.type === "task")}
              onUpdateNote={updateNote}
              onCreateTask={(task) => {
                setNotes([task, ...notes])
                setSelectedNote(task)
                setCurrentView("editor")
              }}
            />
          )}

          {currentView === "calendar" && (
            <CalendarView
              notes={notes}
              onSelectNote={(note) => {
                setSelectedNote(note)
                setCurrentView("editor")
              }}
            />
          )}

          {currentView === "advanced-ai" && (
            <AdvancedAIFeatures
              notes={notes}
              onCreateNote={(note) => {
                setNotes([note, ...notes])
                setSelectedNote(note)
                setCurrentView("editor")
              }}
            />
          )}

          {currentView === "contact" && <ContactPage />}
        </main>
      </div>

      {/* Mobile overlay */}
      {isMenuOpen && (
        <div className="fixed inset-0 bg-black bg-opacity-50 z-30 md:hidden" onClick={() => setIsMenuOpen(false)} />
      )}
    </div>
  )
}
